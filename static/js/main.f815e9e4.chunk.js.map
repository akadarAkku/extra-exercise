{"version":3,"sources":["components/Ex1.js","components/Ex2.js","components/Ex3.js","components/Ex4.js","components/Ex5.js","components/Ex6.js","components/Ex7.js","components/Ex8.js","components/Ex9.js","App.js","serviceWorker.js","index.js"],"names":["Ex1","useState","count","setCount","onClick","Ex2","Ex3","Ex4","initialtime","Date","currenttime","getHours","getMinutes","getSeconds","time","setTime","handleRefresh","Ex5","out","setOut","onMouseOver","Ex6","hover","setHover","Ex7","color","setColor","Ex8","i","console","log","length","Ex9","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f815e9e4.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst Ex1 = () => {\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <div>\r\n          <p>the button was clicked {count} times</p>\r\n          <button onClick={() => setCount(count + 1)}>\r\n            Click me\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\nexport {Ex1}\r\n\r\n","import React, {useState} from 'react';\r\n\r\nconst Ex2 = () => {\r\nconst [count, setCount] = useState(0);\r\nreturn(\r\n    <section>\r\n     <h1> {count} </h1>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Click me\r\n      </button>\r\n      <button onClick={() => setCount(0)}>Reset</button>\r\n     </section>\r\n \r\n)\r\n}\r\n\r\nexport {Ex2}","import React, {useState} from 'react';\r\n\r\nconst Ex3 = () => {\r\n  const [count, setCount] = useState(0);\r\n return (\r\n      <div>\r\n        {count % 3 ? <p>{count} times</p> : <p>Fizz</p>}  \r\n        <button onClick={() => setCount(count + 1)}>\r\n          Click me\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\nexport {Ex3}\r\n\r\n","import React, {useState} from 'react';\r\n\r\n\r\nconst Ex4 = (format = \"DD/MM/YYYY HH:mm:ss\", period = 1000)=> {\r\n  let initialtime = new Date();\r\n  let currenttime = initialtime.getHours()+':'+ initialtime.getMinutes()+':'+ initialtime.getSeconds();\r\n  const [time, setTime] = useState(0)\r\n  const handleRefresh = () => {\r\n      setTime(currenttime)\r\n  }\r\n    return (\r\n        <div>\r\n            <h1>The current time is: {time}</h1>\r\n            <button onClick= {handleRefresh}>Refresh Me!</button>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default Ex4","import React, {useState} from 'react';\r\n\r\nconst Ex5 = () => {\r\n    \r\n    const [out, setOut] = useState('Out')\r\n    const handleMouse = () =>{\r\n        if(out === 'Out') {\r\n            setOut('In')\r\n        } else if (out === 'In') {\r\n            setOut('Out')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{out}</h1>\r\n            <button onMouseOver = {handleMouse}>Hover Over Me</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Ex5","import React, {useState} from 'react';\r\n\r\nconst Ex6 = () => {\r\n    \r\n    const [hover, setHover] = useState(0)\r\n    \r\n    return (\r\n        <div>\r\n            <h1>{hover} times hovered!</h1>\r\n            <button onMouseOver = {() => {setHover(hover + 1)}}>Hover Over Me</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Ex6","import React, {useState} from 'react';\r\n\r\nconst Ex7 = () => {\r\n    \r\n    const [color, setColor] = useState('')\r\n    const handleYellowClick = () => {\r\n        if(color !== 'yellow') {\r\n            setColor('YELLOW')\r\n        } \r\n    }\r\n    const handleGreeClick = () => {\r\n        if(color !== 'green') {\r\n            setColor('GREEN')\r\n        }\r\n    }\r\n    const handleBlueClick = () => {\r\n        if(color !== 'blue') {\r\n            setColor('BLUE')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <p>'{color}'</p>\r\n            <button onClick = {handleYellowClick}>yellow</button>\r\n            <button onClick = {handleGreeClick}>green</button>\r\n            <button onClick = {handleBlueClick}>blue</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Ex7","import React, {useState} from 'react';\r\n\r\nconst Ex8 = () => {\r\n    let text = 'Me'\r\n    const [count, setCount] = useState('This is')\r\n    console.log(count)\r\n    let i\r\n    for (i = 0; i < text.length; i++) {\r\n        \r\n      }\r\n    return (\r\n        <div>\r\n            <p>{count}</p>\r\n            <button onClick = {() => setCount(text[i])}>Previous</button>\r\n            <button onClick = {() => setCount(text)}>Next</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Ex8;","import React, {useState} from 'react';\r\n\r\nconst Ex9 = () => {\r\n    let text = 'Me'\r\n    const [count, setCount] = useState('This is')\r\n    console.log(count)\r\n    let i\r\n    for (i = 0; i < text.length; i++) {\r\n        \r\n      }\r\n    return (\r\n        <div>\r\n            <p>{count}</p>\r\n            <button onClick = {() => setCount(text)}>Previous</button>\r\n            <button onClick = {() => setCount(text)}>Next</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Ex9;","import React from 'react';\nimport {Ex1} from './components/Ex1';\nimport {Ex2} from './components/Ex2';\nimport {Ex3} from './components/Ex3';\nimport Ex4 from './components/Ex4';\nimport Ex5 from './components/Ex5';\nimport Ex6 from './components/Ex6';\nimport Ex7 from './components/Ex7';\nimport Ex8 from './components/Ex8';\nimport Ex9 from './components/Ex9';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Ex1/>\n    <Ex2/>\n    <Ex3/>\n    <Ex4/>\n    <Ex5/>\n    <Ex6/>\n    <Ex7/>\n    <Ex8/>\n    <Ex9/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}